% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mobsterh_fit.R
\name{mobsterh_fit}
\alias{mobsterh_fit}
\title{Fit a model with MOBSTERH.}
\usage{
mobsterh_fit(
  x,
  subclonal_clusters = 0:2,
  tail = c(TRUE, FALSE),
  truncate_pareto = c(TRUE, FALSE),
  purity = 1,
  samples = 1,
  enforce_QC_PASS = TRUE,
  epsilon = 1e-05,
  maxIter = 2000,
  model.selection = "ICL",
  parallel = FALSE,
  pi_cutoff = 0.05,
  N_cutoff = 80,
  silent = FALSE,
  alpha_precision_concentration = 5,
  alpha_precision_rate = 0.01,
  number_of_trials_clonal_mean = 300,
  number_of_trials_k = 120,
  prior_lims_clonal = c(0.1, 1e+05),
  prior_lims_k = c(0.1, 1e+05),
  lr = 0.01,
  compile = FALSE,
  CUDA = FALSE,
  description = "My MOBSTERH model",
  karyotypes = c("1:0", "1:1", "2:1", "2:0", "2:2"),
  lrd_gamma = 0.1,
  vaf_filter = 0.05,
  n_t = 100
)
}
\arguments{
\item{x}{Input tibble (or data.frame) or an evopipe_qc object (preferred),}

\item{subclonal_clusters}{A vector with the number of Beta components to use. All values of \code{K} must be positive
and strictly greater than 0; they are combined with the value of \code{tail} to define all model
configurations tested for model selection}

\item{tail}{If \code{0} the fit will not use a tail, if \code{1} it will.}

\item{epsilon}{Tolerance for convergency estimation. For MLE fit this is compared to the differential of the
negative log-likelihood (NLL); for MM fit the largest differential among the mixing proportions (pi) is used.}

\item{maxIter}{Maximum number of steps for a fit. If convergency is not achieved before these steps, the fit is interrupted.}

\item{model.selection}{Score to minimize to select the best model; this has to be one of \code{'ICL'},
\code{'BIC'}, \code{'AIC'} or \code{'likelihood'}. We advise to use only reICL and ICL}

\item{parallel}{Optional parameter to run the fits in parallel (default), or not.}

\item{pi_cutoff}{Parameter passed to function \code{choose_clusters}, which determines the minimum mixing proportion of a
cluster to be returned as output.}

\item{N_cutoff}{Parameter passed to function \code{choose_clusters}, which determines the minimum number of mutations
assigned to a cluster to be returned as output.}

\item{description}{A textual description of this dataset.}

\item{lrd_gamma}{learning rate decay fator, final learning rate is gonna be lrd_gamma * lr}

\item{vaf_filter}{Discard mutations under a specific VAF threshold for the fitting procedure}

\item{n_t}{Discard karyotypes with less then a given number of mutations.}

\item{init}{Initial values for the paremeters of the model. With \code{"ranodm"} the mean and variance
of each Beta component are randomply sampled in the interval (0,1). With \code{"peaks"} a peak detection
heuristic is used to place the Beta means to match the peaks; in that case the variance is still randomised.
In both cases the power-law shape is randomised.}

\item{seed}{Seed for the random numbers generator}
}
\value{
A list of all fits computed (objects of class \code{dbpmm}), the best fit, a table with the results of the fits and a
variable that specify which score has been used for model selection.
}
\description{
This function fits a bayesian hierarchical version of the MOBSTER model implemented in \code{mobster_fit}. We still
have a mixture of beta distributions and an optional Pareto type-one distribution to model the neutral tail. From a modelling
point of view the main difference here is that we are expanding that model over different karyotypes and we treat the problem from a bayesian point of view.
In this way we can grant information about the mutationt rate and the tail pooling from the different karyotypes and at the same time include the
strong prior knowledge we have about
}
\examples{
# Generate a random dataset
x = random_dataset(seed = 123, Beta_variance_scaling = 100, N = 200)
print(x) # Contains a ggplot object

# Fit, default models, changed epsilon for convergence
x = mobster_fit(x$data, epsilon = 1e-5)

plot(x$best)
print(x$best)

lapply(x$runs[1:3], plot)

}
